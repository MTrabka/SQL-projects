SELECT * FROM trips;
-- names: id, date, pickup, dropoff, rider_id, car_id, type, cost

SELECT * FROM riders;
-- id, first, last, username, rating, total_trip, referred

SELECT * FROM cars;
-- id, model, OS, status, trips_completed

-- Primary keys:
-- trips: id
-- riders: id
-- cars: id

/* TASK 3 Try out a simple cross join between riders and cars.*/

SELECT * FROM riders 
CROSS JOIN cars;

-- not useful

/* TASK 4
Suppose we want to create a Trip Log with the trips and its users.

Find the columns to join between trips and riders and combine the two tables using a LEFT JOIN.

Let trips be the left table.
*/

SELECT * FROM trips 
LEFT JOIN riders
ON trips.rider_id=riders.id;

/* TASK 5 Suppose we want to create a link between the trips and the cars used during those trips.

Find the columns to join on and combine the trips and cars table using an INNER JOIN.*/

SELECT *
FROM trips
JOIN cars
  ON trips.car_id = cars.id;

/* TASK 6  The new riders data are in! There are three new users this month.

Stack the riders table on top of the new table named riders2.*/

SELECT * FROM riders 
UNION
SELECT * FROM riders2;

-- TASK 7 What is the average cost for a trip? 31.915

SELECT AVG(cost) from trips;

-- TASK 8 
--Lyft is looking to do an email campaign for all the irregular users. Find all the riders who have used Lyft less than 500 times!

SELECT *
FROM riders
WHERE total_trips < 500
UNION
SELECT *
FROM riders2
WHERE total_trips < 500;

-- TASK 9 Calculate the number of cars that are active. 3

SELECT COUNT(*) FROM cars
WHERE status='active';

/* TASK 10 
Itâ€™s safety recall time for cars that have been on the road for a while.

Write a query that finds the two cars that have the highest trips_completed.*/

SELECT * FROM cars
ORDER BY trips_completed DESC
LIMIT 2;
